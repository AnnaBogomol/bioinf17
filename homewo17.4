import pandas as pd
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, plot_roc_curve
import matplotlib.pyplot as plt

df = pd.read_pickle("bc_data.pkl")
ann = pd.read_pickle("bc_ann.pkl")

X_train = df.loc[ann.loc[ann["Dataset type"] == "Training"].index].to_numpy()
y_train = ann.loc[ann["Dataset type"] == "Training", "Class"].to_numpy()

X_test = df.loc[ann.loc[ann["Dataset type"] == "Validation"].index].to_numpy()
y_test = ann.loc[ann["Dataset type"] == "Validation", "Class"].to_numpy()

model = SVC(kernel="linear")
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
M = confusion_matrix(y_test, y_pred)
TPR = M[0, 0] / (M[0, 0] + M[0, 1])
TNR = M[1, 1] / (M[1, 0] + M[1, 1])
print('TPR1=', TPR)
print('TNR1=', TNR)
plot_roc_curve(model, X_test, y_test)
plt.plot(1 - TPR, TNR, "x", c="red")
plt.savefig("ROCK_AUC1.pdf", dpi=300)
plt.close()

genes = "TRIP13;UBE2C;ZWINT;EPN3;KIF4A;ECHDC2;MTFR1;STARD13;IGFBP6;NUMA1;CCNL2".split(";")
df = df[genes]

X_train = df.loc[ann.loc[ann["Dataset type"] == "Training"].index].to_numpy()
y_train = ann.loc[ann["Dataset type"] == "Training", "Class"].to_numpy()

X_test = df.loc[ann.loc[ann["Dataset type"] == "Validation"].index].to_numpy()
y_test = ann.loc[ann["Dataset type"] == "Validation", "Class"].to_numpy()

model = SVC(kernel="linear")
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
M = confusion_matrix(y_test, y_pred)
TPR = M[0, 0] / (M[0, 0] + M[0, 1])
TNR = M[1, 1] / (M[1, 0] + M[1, 1])
print('TPR2=', TPR)
print('TNR2=', TNR)
plot_roc_curve(model, X_test, y_test)
plt.plot(1 - TPR, TNR, "x", c="red")
plt.savefig("ROCK_AUC2.pdf", dpi=300)
plt.close()

# Result:
#TPR1= 0.75
#TNR1= 0.4583333333333333
#TPR2= 0.75
#TNR2= 0.7083333333333334
